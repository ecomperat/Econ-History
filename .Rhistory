pseine2
seine = st_transform(seine, crs = st_crs(france))
sf_use_s2(FALSE)  # need to turn off because of invalid geometry
france_intersected = st_intersection(france, seine)
head(france_intersected,2)
pl3 = france_intersected %>%
ggplot() +
geom_sf(alpha = 0.8, aes(fill = ID, col = ID)) +
labs(
title = "Seine, Marne and Yonne rivers",
caption = "Colours depict French administrative regions"
) +
theme(legend.title = element_blank())
ggsave(plot = pl3,"images/seine3.png",
width=7, height=5)
pl3
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T) %>%
## pipe into ggplot
ggplot() +
geom_sf(alpha = 0.5,
fill = "#01731f",
col = "#fcb4b3",  # of borders
linewidth = 0.5) + # of borders
geom_sf(data = seine, col = "#05E9FF", lwd = 1) +
labs(title = "Intersected regions only") +
theme_bw()
ggsave(plot = pl4,"images/seine4.png",
width=7, height=5)
pl4
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T) %>%
## pipe into ggplot
ggplot() +
geom_sf(alpha = 0.5,
fill = ID,
col = ID,  # of borders
linewidth = 0.5) + # of borders
geom_sf(data = seine, col = "#05E9FF", lwd = 1) +
labs(title = "Intersected regions only") +
theme_bw()
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T) %>%
## pipe into ggplot
ggplot() +
geom_sf(alpha = 0.5,
aes(fill = ID, col = ID)),  # of borders
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T) %>%
## pipe into ggplot
ggplot() +
geom_sf(alpha = 0.5,
aes(fill = ID, col = ID)),  # of borders
ggsave(plot = pl4,"images/seine4.png",
width=7, height=5)
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T) %>%
## pipe into ggplot
ggplot() +
geom_sf(alpha = 0.5,
aes(fill = ID, col = ID),  # of borders
linewidth = 0.5) + # of borders
geom_sf(data = seine, col = "#05E9FF", lwd = 1) +
labs(title = "Intersected regions only") +
theme_bw()
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
## pipe into ggplot
geom_sf(alpha = 0.5,
+ # of borders
pl4 = st_join(france, seine) %>%
pl4 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T) %>%
## pipe into ggplot
ggplot() +
geom_sf(alpha = 0.5,
aes(fill = ID, col = ID),  # of borders
) + # of borders
geom_sf(data = seine, col = "#05E9FF", lwd = 1) +
labs(title = "Intersected regions only") +
theme_bw()
pl4
d5 = st_join(france, seine) %>%
## Get rid of regions with no overlap
dplyr::filter(!is.na(name)) %>%
## Some regions are duplicated b/c two
## branches of the river network flow through them
dplyr::distinct(ID, .keep_all = T)
my_colors = palette.colors(nrow(d5), palette = "Alphabet")
names(my_colors) <- NULL
## pipe into ggplot
pl5 = ggplot(data = d5) +
geom_sf(aes(fill = ID),
col = "#fcb4b3",  # of borders
linewidth = 0.5) + # of borders
geom_sf(data = seine, col = "#05E9FF", lwd = 1.5) +
labs(title = "Intersected regions only", fill = "Departement") +
theme_bw() +
scale_fill_manual(values = my_colors)
ggsave(plot = pl5,"images/seine5.png",
width=7, height=5)
pl5
# start from here
p6 = ggplot(d5) + geom_sf()
p6
cvec = rep(NA, length(unique(d5$ID)))
names(cvec) <- unique(d5$ID)
cvec["Seine-Maritime"] <- "purple"
cvec["Nievre"] <- "brown"
p6 = ggplot(d5) + geom_sf()
p6 = ggplot(d5) + geom_sf(aes(fill = ID))
p6 = p6 + scale_fill_manual(values = cvec, limits= c("Seine-Maritime","Nievre"))
subdeps = d5 %>% dplyr::filter(ID %in% c("Seine-Maritime","Nievre"))
p6 = p6 + geom_sf(data = st_centroid(subdeps))
ggsave(plot = p6, "images/distance1.png", width = 5,height=4)
dists = st_distance(subdeps) %>% units::set_units("km")
p7 = p7 + ggtitle(paste("Distance between Centroids:",round(dists[1,2],0), "km"))
ggsave(plot = p7, "images/distance2.png",width = 5,height=4)
p7
cvec = rep(NA, length(unique(d5$ID)))
names(cvec) <- unique(d5$ID)
cvec["Seine-Maritime"] <- "purple"
cvec["Nievre"] <- "brown"
p6 = ggplot(d5) + geom_sf()
p6 = ggplot(d5) + geom_sf(aes(fill = ID))
p6 = p6 + scale_fill_manual(values = cvec, limits= c("Seine-Maritime","Nievre"))
subdeps = d5 %>% dplyr::filter(ID %in% c("Seine-Maritime","Nievre"))
p6 = p6 + geom_sf(data = st_centroid(subdeps))
ggsave(plot = p6, "images/distance1.png", width = 5,height=4)
dists = st_distance(subdeps) %>% units::set_units("km")
install.packages("lwgeomâ€™")
library(lwgeom)
install.packages("lwgeom")
library(lwgeom)
dists = st_distance(subdeps) %>% units::set_units("km")
coords = st_centroid(subdeps) %>% st_coordinates()
coords = data.frame(lon = coords[1,"X"],
lat = coords[1,"Y"],
lon_end = coords[2,"X"],
lat_end = coords[2,"Y"])
p7 = p6 + geom_segment(data = coords, aes(lon, lat, xend = lon_end, yend = lat_end))
p7 = p7 + ggtitle(paste("Distance between Centroids:",round(dists[1,2],0), "km"))
ggsave(plot = p7, "images/distance2.png",width = 5,height=4)
p7
p6
#we want to get the centroids
st_centroid(p6)
#we want to get the centroids
st_centroid(d5)
#we want to get the centroids
d5 %>%
st_centroid(ID)
#we want to get the centroids
d5 %>%
filter(ID== Seine-Maritime | ID == Nievre)
#we want to get the centroids
d5 %>%
filter(ID== Seine-Maritime | ID == Nievre) %>%
st_centroid(ID)
#we want to get the centroids
d5 %>%
filter(ID== Seine-Maritime | ID == Nievre) %>%
st_centroid()
#we want to get the centroids
d5 %>%
filter(ID== Seine-Maritime | ID == Nievre) %>%
st_centroid() %>%
head()
cvec = rep(NA, length(unique(d5$ID)))
#we want to get the centroids
d5 %>%
dplyr :: filter(ID %in% c(Seine-Maritime, Nievre))%>%
st_centroid
d5
#we want to get the centroids
d5 %>%
dplyr :: filter(ID %in% c("Seine-Maritime", "Nievre"))%>%
st_centroid
#we want to get the centroids
d5 %>%
dplyr :: filter(ID %in% c("Seine-Maritime", "Nievre"))%>%
st_centroid()
#we want to get the centroids
d6 = d5 %>%
dplyr :: filter(ID %in% c("Seine-Maritime", "Nievre"))%>%
st_centroid()
d6
d6 %>%
plot("id")
d6 %>%
plot(DF ["id"])
d6 %>%
plot(DF ["ID"])
d6 %>%
plot(DF ["ID"], na.rm==TRUE)
d6 %>%
plot(DF ["ID"], na.rm=TRUE)
d6 %>%
plot(DF ["ID"], na.rm)
d6 %>%
plot(DF ["ID"])
cvec = rep(NA, length(unique(d5$ID)))
names(cvec) <- unique(d5$ID)
cvec["Seine-Maritime"] <- "purple"
cvec["Nievre"] <- "brown"
p6 = ggplot(d5) + geom_sf()
p6 = ggplot(d5) + geom_sf(aes(fill = ID))
p6 = p6 + scale_fill_manual(values = cvec, limits= c("Seine-Maritime","Nievre"))
subdeps = d5 %>% dplyr::filter(ID %in% c("Seine-Maritime","Nievre"))
p6 = p6 + geom_sf(data = st_centroid(subdeps))
ggsave(plot = p6, "images/distance1.png", width = 5,height=4)
library(lwgeom)
dists = st_distance(subdeps) %>% units::set_units("km")
coords = st_centroid(subdeps) %>% st_coordinates()
coords = data.frame(lon = coords[1,"X"],
lat = coords[1,"Y"],
lon_end = coords[2,"X"],
lat_end = coords[2,"Y"])
p7 = p6 + geom_segment(data = coords, aes(lon, lat, xend = lon_end, yend = lat_end))
p7 = p7 + ggtitle(paste("Distance between Centroids:",round(dists[1,2],0), "km"))
ggsave(plot = p7, "images/distance2.png",width = 5,height=4)
p7
# Set seed for reproducibility
set.seed(12345)
# Simulate 1000 observations from a uniform distribution U(0, 1)
x1 <- runif(1000, min = 0, max = 1)
# Summarize x1 and store its mean
x1_mean <- mean(x1)
x1_mean
#Q2#
# Load necessary library
library(boot)
# Define function to calculate mean for bootstrap samples
bootstrap_mean <- function(data, indices) {
mean(data[indices])
}
# Bootstrap resampling
boot_result <- boot(x1, bootstrap_mean, R = 1000)
# Calculate standard error
boot_se <- boot_result$se
# Calculate confidence interval
boot_ci <- boot.ci(boot_result, type = "basic")$basic
# Print results
boot_se
boot_ci
boot_result
# Print results
boot_se
boot_result$se
boot.ci(boot_result, type = "basic")$basic
boot_result
# Calculate standard error
boot_se <- boot_result$std. error
summary(boot_result)
summary(boot_result), details
summary(boot_result), detail
summary(boot_result, details)
summary(boot_result)
names(boot_result)
summary(boot_result)
# Bootstrap resampling
boot_result <- boot(x1, bootstrap_mean, R = 1000)
summary(boot_result)
boot_result
boot_se <- sd(boot_result$t)
boot_se
# Calculate confidence interval
boot_ci <- quantile(boot_result$t, c(0.025, 0.975))
boot_ci
# Calculate confidence interval
boot_ci <- quantile(boot_result$t, c(0.025, 0.975))
boot_ci
# Print results
print("Bootstrap Standard Error:")
print(boot_se)
print("Bootstrap Confidence Interval:")
print(boot_ci)
x1_mean
#Q3#
#a)
bootstrap_sample <- sample(x1, replace = TRUE)
bootstrap_mean <- mean(bootstrap_sample)
# Now 'bootstrap_mean' contains the mean of the bootstrap sample
# You can use it for further analysis or print it
print(bootstrap_mean)
#b)
# Create an empty vector to store the means
bootstrap_means <- numeric(100)
# Generate a bootstrap sample by sampling with replacement from the current dataset
bootstrap_sample <- sample(data, replace = TRUE)
# Generate a bootstrap sample by sampling with replacement from the current dataset
bootstrap_sample <- sample(x1, replace = TRUE)
for (i in 1:100) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bootstrap_sample <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bootstrap_means[i] <- mean(bootstrap_sample)
}
# Plot a histogram of the means
hist(bootstrap_means, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
# Plot a histogram of the means
hist(bootstrap_means, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
#c)
bootstrap_estimates <- boot(data = bootstrap_means, statistic = mean, R = 1000)
#c)
summary(bootstrap_means)
# Compute bootstrap estimates
bootstrap_mean <- mean(bootstrap_means)
bootstrap_median <- median(bootstrap_means)
bootstrap_sd <- sd(bootstrap_means)
# Display bootstrap estimates
print("Bootstrap Mean:")
print(bootstrap_mean)
print("Bootstrap Median:")
print(bootstrap_median)
print("Bootstrap Standard Deviation:")
print(bootstrap_sd)
boot_result
bootstrap_sd <- sd(bootstrap_means)
print(bootstrap_sd)
bs_sample_10000_100 <- sample(x1, size = 10000, replace = TRUE)
bs_means_10000_100 <- mean(bs_sample_10000_100)
print(bs_mean_10000_100)
print(bs_means_10000_100)
bs_means_10000_100 <- numeric(100)
for (i in 1:100) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bs_sample_10000_100 <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bs_means_10000_100[i] <- mean(bs_sample_10000_100)
}
hist(bs_means_10000_100, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
summary(bs_means_10000_100)
bs_mean_10000_100 <- mean(bs_means_10000_100)
bs_median_10000_100 <- median(bs_mean_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100)
print("Bootstrap Mean:")
print(bs_mean_10000_100)
print("Bootstrap Median:")
print(bs_median_10000_100)
print("Bootstrap Standard Deviation:")
print(bs_sd_10000_100)
print(bootstrap_sd)
print(bs_sd_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100)
print(bs_median_10000_100)
print(bs_sd_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100, is.na=TRUE)
bs_sd_10000_100 <- sd(bs_mean_10000_100, na.omit)
bs_sample_10000_100 <- sample(x1, size = 10000, replace = TRUE)
bs_means_10000_100 <- mean(bs_sample_10000_100)
print(bs_means_10000_100)
bs_means_10000_100 <- numeric(100)
for (i in 1:100) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bs_sample_10000_100 <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bs_means_10000_100[i] <- mean(bs_sample_10000_100)
}
hist(bs_means_10000_100, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
summary(bs_means_10000_100)
bs_mean_10000_100 <- mean(bs_means_10000_100)
bs_median_10000_100 <- median(bs_mean_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100, na.omit)
bs_sd_10000_100 <- sd(bs_mean_10000_100)
print("Bootstrap Mean:")
print(bs_mean_10000_100)
print("Bootstrap Median:")
print(bs_median_10000_100)
print("Bootstrap Standard Deviation:")
print(bs_sd_10000_100)
bs_mean_10000_100 <- mean(bs_means_10000_100)
bs_median_10000_100 <- median(bs_means_10000_100)
bs_sd_10000_100 <- sd(bs_means_10000_100)
print("Bootstrap Mean:")
print(bs_mean_10000_100)
print("Bootstrap Median:")
print(bs_median_10000_100)
print("Bootstrap Standard Deviation:")
print(bs_sd_10000_100)
bs_sample_1000_1000 <- sample(x1, size = 1000, replace = TRUE)
bs_means_1000_1000 <- mean(bs_sample_1000_1000)
print(bs_means_1000_1000)
bs_means_1000_1000 <- numeric(1000)
for (i in 1:1000) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bs_sample_1000_1000 <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bs_means_1000_1000[i] <- mean(bs_sample_1000_1000)
}
hist(bs_means_1000_1000, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
summary(bs_means_1000_1000)
bs_mean_1000_1000 <- mean(bs_means_1000_1000)
bs_median_1000_1000 <- median(bs_means_1000_1000)
bs_sd_1000_1000 <- sd(bs_means_1000_1000)
print("Bootstrap Mean:")
print(bs_mean_1000_1000)
print("Bootstrap Median:")
print(bs_median_1000_1000)
print("Bootstrap Standard Deviation:")
print(bs_sd_1000_1000)
rm(list=ls())
####################
## Economic History - Assignment 1
####################
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
## 2. Open the datasets
library(openxlsx)
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
##3.
#a) Merge the datasets: dta3
library(tidyr)
library(dplyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta3 <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
filter(!is.na(year)) %>%
group_by(state)%>%
mutate(month = as.numeric(month)) %>%
arrange(year, month, .by_group = TRUE)
head(dta3)
##4. Create a post-crash dummy: crash
dta4 <- dta3 %>%
mutate (crash = ifelse(year < 1929 | (year == 1929 & month <= 10), 0, 1))
##5. In an ideal world, what should xs be if we're interested in the wealth
#channel of the crash?
# The xs should capture the direct impact of the exposure to the stock market
# crash at the state level on consumption, being an appropriate measure
# of the exogenous variation in stock market exposure at the state level.
# This variable would need to reflect the pre-crash financial exposure of each
# state in a way that captures potential heterogeneous treatment effects from
# the crash, but is also exogenous to consumption trends.
#
# In other words, there must be pre-treatment exogeneity; xs must reflect
# exposure before the crash.
#
#
# Interesting proxys could be stock ownership rates at the state level or state
# level wealth tied to the financial market.
##6. Construct x and explain the idea behind this measure:
dta6 <- dta4 %>%
mutate (x = dividend_income / total_income)
summary(dta6$x)
# The idea behind this measure is to estimate the exposure to the stock market
# crash  by computing the share of total income due to dividends. In other words,
# it should reflect the share of agents' income that depends on the stock
# market since the dividends corresponds to the reward of holdings assets. Thus,
# fluctuations in the stock market will affect dividends, which will in turn
# affect income and consumption.
##7. Explain the idea behind regression (1), what are the identification concerns?
# ...
##8.
dta8 = dta6 %>%
filter(year %in% c(1929, 1930)) %>%
mutate (log_car = log(car_sales)) %>%
mutate (time = as.Date(paste(year, as.numeric(month), "01", sep = "-")))
library(lfe)
library(fixest)
#This is with interaction and time fixed effect
reg8_felm = felm(log_car ~ x*crash | time + state, data = dta8)
summary(reg8_felm)
reg8_feols = feols(log_car ~ x*crash | time + state, data = dta8)
summary(reg8_feols)
#This is with interaction
reg8 = felm(log_car ~ x*crash | time + state, data = dta8)
summary(reg8)
#This is without interaction
dta8_bis = dta6 %>%
filter(year %in% c(1929, 1930)) %>%
mutate (log_car = log(car_sales)) %>%
mutate (x_d = x * crash)
reg8_bis = felm(log_car ~ x_d | year + state, data = dta8_bis)
summary(reg8_bis)
View(dta3)
View(dta3)
View(car)
