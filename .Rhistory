boot_se <- boot_result$std. error
summary(boot_result)
summary(boot_result), details
summary(boot_result), detail
summary(boot_result, details)
summary(boot_result)
names(boot_result)
summary(boot_result)
# Bootstrap resampling
boot_result <- boot(x1, bootstrap_mean, R = 1000)
summary(boot_result)
boot_result
boot_se <- sd(boot_result$t)
boot_se
# Calculate confidence interval
boot_ci <- quantile(boot_result$t, c(0.025, 0.975))
boot_ci
# Calculate confidence interval
boot_ci <- quantile(boot_result$t, c(0.025, 0.975))
boot_ci
# Print results
print("Bootstrap Standard Error:")
print(boot_se)
print("Bootstrap Confidence Interval:")
print(boot_ci)
x1_mean
#Q3#
#a)
bootstrap_sample <- sample(x1, replace = TRUE)
bootstrap_mean <- mean(bootstrap_sample)
# Now 'bootstrap_mean' contains the mean of the bootstrap sample
# You can use it for further analysis or print it
print(bootstrap_mean)
#b)
# Create an empty vector to store the means
bootstrap_means <- numeric(100)
# Generate a bootstrap sample by sampling with replacement from the current dataset
bootstrap_sample <- sample(data, replace = TRUE)
# Generate a bootstrap sample by sampling with replacement from the current dataset
bootstrap_sample <- sample(x1, replace = TRUE)
for (i in 1:100) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bootstrap_sample <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bootstrap_means[i] <- mean(bootstrap_sample)
}
# Plot a histogram of the means
hist(bootstrap_means, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
# Plot a histogram of the means
hist(bootstrap_means, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
#c)
bootstrap_estimates <- boot(data = bootstrap_means, statistic = mean, R = 1000)
#c)
summary(bootstrap_means)
# Compute bootstrap estimates
bootstrap_mean <- mean(bootstrap_means)
bootstrap_median <- median(bootstrap_means)
bootstrap_sd <- sd(bootstrap_means)
# Display bootstrap estimates
print("Bootstrap Mean:")
print(bootstrap_mean)
print("Bootstrap Median:")
print(bootstrap_median)
print("Bootstrap Standard Deviation:")
print(bootstrap_sd)
boot_result
bootstrap_sd <- sd(bootstrap_means)
print(bootstrap_sd)
bs_sample_10000_100 <- sample(x1, size = 10000, replace = TRUE)
bs_means_10000_100 <- mean(bs_sample_10000_100)
print(bs_mean_10000_100)
print(bs_means_10000_100)
bs_means_10000_100 <- numeric(100)
for (i in 1:100) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bs_sample_10000_100 <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bs_means_10000_100[i] <- mean(bs_sample_10000_100)
}
hist(bs_means_10000_100, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
summary(bs_means_10000_100)
bs_mean_10000_100 <- mean(bs_means_10000_100)
bs_median_10000_100 <- median(bs_mean_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100)
print("Bootstrap Mean:")
print(bs_mean_10000_100)
print("Bootstrap Median:")
print(bs_median_10000_100)
print("Bootstrap Standard Deviation:")
print(bs_sd_10000_100)
print(bootstrap_sd)
print(bs_sd_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100)
print(bs_median_10000_100)
print(bs_sd_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100, is.na=TRUE)
bs_sd_10000_100 <- sd(bs_mean_10000_100, na.omit)
bs_sample_10000_100 <- sample(x1, size = 10000, replace = TRUE)
bs_means_10000_100 <- mean(bs_sample_10000_100)
print(bs_means_10000_100)
bs_means_10000_100 <- numeric(100)
for (i in 1:100) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bs_sample_10000_100 <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bs_means_10000_100[i] <- mean(bs_sample_10000_100)
}
hist(bs_means_10000_100, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
summary(bs_means_10000_100)
bs_mean_10000_100 <- mean(bs_means_10000_100)
bs_median_10000_100 <- median(bs_mean_10000_100)
bs_sd_10000_100 <- sd(bs_mean_10000_100, na.omit)
bs_sd_10000_100 <- sd(bs_mean_10000_100)
print("Bootstrap Mean:")
print(bs_mean_10000_100)
print("Bootstrap Median:")
print(bs_median_10000_100)
print("Bootstrap Standard Deviation:")
print(bs_sd_10000_100)
bs_mean_10000_100 <- mean(bs_means_10000_100)
bs_median_10000_100 <- median(bs_means_10000_100)
bs_sd_10000_100 <- sd(bs_means_10000_100)
print("Bootstrap Mean:")
print(bs_mean_10000_100)
print("Bootstrap Median:")
print(bs_median_10000_100)
print("Bootstrap Standard Deviation:")
print(bs_sd_10000_100)
bs_sample_1000_1000 <- sample(x1, size = 1000, replace = TRUE)
bs_means_1000_1000 <- mean(bs_sample_1000_1000)
print(bs_means_1000_1000)
bs_means_1000_1000 <- numeric(1000)
for (i in 1:1000) {
# Generate a bootstrap sample by sampling with replacement from the current dataset
bs_sample_1000_1000 <- sample(x1, replace = TRUE)
# Calculate the mean of the bootstrap sample and store it
bs_means_1000_1000[i] <- mean(bs_sample_1000_1000)
}
hist(bs_means_1000_1000, main = "Histogram of Bootstrap Sample Means", xlab = "Mean", ylab = "Frequency")
summary(bs_means_1000_1000)
bs_mean_1000_1000 <- mean(bs_means_1000_1000)
bs_median_1000_1000 <- median(bs_means_1000_1000)
bs_sd_1000_1000 <- sd(bs_means_1000_1000)
print("Bootstrap Mean:")
print(bs_mean_1000_1000)
print("Bootstrap Median:")
print(bs_median_1000_1000)
print("Bootstrap Standard Deviation:")
print(bs_sd_1000_1000)
rm(list=ls())
library(openxlsx)
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
car = read_xlsx("StateNewCarRegistration.xlsx")
car = read.xlsx("StateNewCarRegistration.xlsx")
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
colnames(car)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car")
head(car_long)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
head(stock)
merged_data <- merge(car_long, stock, by = "state", all.x = TRUE)
head(merge)
merged_dta <- merge(car_long, stock, by = "state", all.x = TRUE)
head(merged_dta)
tail(merged_dta)
merged_dta <- merge(stock, car_long, by = "state", all.x = TRUE)
head(merged_dta)
merged_dta2 = merged_dta(c[state, year, month, capital_gains, div_income, total_income, nb_returns, population, car_sales])
merged_dta2 = merged_dta[c(state, year, month, capital_gains, div_income, total_income, nb_returns, population, car_sales)]
head(car)
head(merged_dta)
dta = merged_dta[c(state, year, month, capital_gains, div_income, total_income, nb_returns, population, car_sales)]
rm(list=ls())
library(openxlsx)
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta <- merge(stock, car_long, by = "state", all.x = TRUE)
head(dta)
dta <- merge(car_long, stock, by = "state", all.x = TRUE)
dta_clean <- df[!is.na(df$year), ]
dta_clean <- df[!is.na(df$year), ]
dta_clean <- df[!is.na(df$year) ]
dta_clean <- df[,!is.na(df$year) ]
dta <- merge(car_long, stock, by = "state", all.x = TRUE)%>%
filter(!is.na(year))
dta <- merge(car_long, stock, by = "state", all.x = TRUE)%>%
filter(!is.na(year))
head(dta)
rm(list=ls())
library(openxlsx)
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta <- merge(car_long, stock, by = "state", all.x = TRUE)%>%
head(dta)
dta <- merge(car_long, stock, by = "state", all.x = TRUE)%>%
head(dta)
dta <- merge(car_long, stock, by = "state", all.x = TRUE)%>%
head(dta)
dta <- merge(car_long, stock, by = "state", all.x = TRUE)%>%
head(dta)
dta <- merge(car_long, stock, by = "state", all.x = TRUE)
head(dta)
dta_clean <- dta[,!is.na(df$year) ]
dta_clean <- dta[,!is.na(dta$year)]
dta_clean <- df[,!is.na(dta$year)]
head(dta)
dta <- merge(stock, car_long, by = "state", all.x = TRUE)
head(dta)
dta2 = dta %>%
group_by(state)
dta2 = dta %>%
groupby(state)
dta2 = dta %>%
group_by(state)
library(dplyr)
dta2 = dta %>%
group_by(state)
head(dta2)
dta2 = dta %>%
group_by(state) %>%%
dta2 = dta %>%
group_by(state) %>%
filter(!is.na(dta$year))
head(dta2)
dta2 = dta %>%
group_by(state) %>%
filter(!is.na(dta2$year))
head(dta2)
dta2 = dta %>%
group_by(state) %>%
filter(!is.na(year))
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
sort_by(year) %>%
group_by(state)
dta2 = dta %>%
filter(!is.na(year)) %>%
sort_by(year) %>%
group_by(state)
dta2 = dta %>%
filter(!is.na(year)) %>%
sort_by(dta2$year) %>%
group_by(state)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
sort_by(dta2$year) %>%
sort_by(dta2$month) %>%
group_by(state)
head(dta2)
dta <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
group_by(state)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, month, .by_group = TRUE=)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, month, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(month, year, .by_group = TRUE)
head(dta2)
year
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, month, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, month, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
group_by(year, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, .by_group = TRUE) %>%
arrange(month, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, month, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
dta2$month = as.numeric(dta2$month) %>%
arrange(year, month, .by_group = TRUE)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
dta2$month = as.numeric(dta2$month) %>%
dta2$year = as.numeric(dta2$year) %>%
arrange(year, month, .by_group = TRUE)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
dta2$month = as.numeric(dta$month) %>%
dta2$year = as.numeric(dta$year) %>%
arrange(year, month, .by_group = TRUE)
head(dta2)
rm(list=ls())
library(openxlsx)
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
library(dplyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
group_by(state)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
dta2$month = as.numeric(dta$month) %>%
dta2$year = as.numeric(dta$year) %>%
arrange(year, month, .by_group = TRUE)
rm(list=ls())
library(openxlsx)
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
library(dplyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
group_by(state)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
arrange(year, month, .by_group = TRUE)
head(dta2)
dta2 = dta %>%
filter(!is.na(year)) %>%
group_by(state)%>%
mutate(month = as.numeric(month)) %>%
arrange(year, month, .by_group = TRUE)
head(dta2)
rm(list=ls())
library(openxlsx)
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
library(dplyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
filter(!is.na(year)) %>%
group_by(state)%>%
mutate(month = as.numeric(month)) %>%
arrange(year, month, .by_group = TRUE)
head(dta2)
head(dta)
dta3 <- mutate (crash = ifelse(year < 1929 | (year == 1929 & month <= 10), 0, 1))
dta3 <- dta3 %>%
mutate (crash = ifelse(year < 1929 | (year == 1929 & month <= 10), 0, 1))
dta3 <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
filter(!is.na(year)) %>%
group_by(state)%>%
mutate(month = as.numeric(month)) %>%
arrange(year, month, .by_group = TRUE)
head(dta3)
dta3 <- dta3 %>%
mutate (crash = ifelse(year < 1929 | (year == 1929 & month <= 10), 0, 1))
head(dta3)
head(dta3)
View(dta3)
rm(list=ls())
rm(list=ls())
setwd("C:/Users/etien/OneDrive/Documents/GitHub/Econ-History")
## 2. Open the datasets
library(openxlsx)
car = read.xlsx("StateNewCarRegistrations.xlsx")
stock = read.xlsx("stock_income.xlsx")
head(stock)
head(car)
library(tidyr)
library(dplyr)
car_long <- pivot_longer(car,
cols = -c(month, year),
names_to = "state",
values_to = "car_sales")
head(car_long)
dta3 <- merge(stock, car_long, by = "state", all.x = TRUE)%>%
filter(!is.na(year)) %>%
group_by(state)%>%
mutate(month = as.numeric(month)) %>%
arrange(year, month, .by_group = TRUE)
head(dta3)
dta4 <- dta3 %>%
mutate (crash = ifelse(year < 1929 | (year == 1929 & month <= 10), 0, 1))
head(dta4)
##6. Construct x and explain the idea behind this measure:
dta6 <- dta4 %>%
mutate (x = div_income / total_income)
head(dta4)
##6. Construct x and explain the idea behind this measure:
dta6 <- dta4 %>%
mutate (x = div_income / total_income)
##6. Construct x and explain the idea behind this measure:
dta6 <- dta4 %>%
mutate (x = dividend_income / total_income)
head(dta6)
View(dta6)
summary(dta6$x)
dta8 = dta6 %>%
select(year <= 1930)
head(dta8)
dta8 = dta6 %>%
select(year <= 1930)
dta8 = dta6 %>%
select(dta6$year <= 1930)
dta8 = dta6 %>%
filter(year %in% c(1929, 1930))
head(dta8)
dta8 = dta6 %>%
filter(year %in% c(1929, 1930)) %>%
mutate (log_car = log(car_sales))
library(lfe)
reg8 = felm(log_car ~ x*crash | year + state, data = dta8)
summary(reg8)
#This is without interaction
dta8_bis = dta6 %>%
filter(year %in% c(1929, 1930)) %>%
mutate (log_car = log(car_sales)) %>%
mutate (x_d = x * crash)
reg8 = felm(log_car ~ x_d | year + state, data = dta8_bis)
#This is with interaction
reg8 = felm(log_car ~ x*crash | year + state, data = dta8)
dta8 = dta6 %>%
filter(year %in% c(1929, 1930)) %>%
mutate (log_car = log(car_sales))
library(lfe)
#This is with interaction
reg8 = felm(log_car ~ x*crash | year + state, data = dta8)
summary(reg8)
#This is without interaction
dta8_bis = dta6 %>%
filter(year %in% c(1929, 1930)) %>%
mutate (log_car = log(car_sales)) %>%
mutate (x_d = x * crash)
reg8_bis = felm(log_car ~ x_d | year + state, data = dta8_bis)
summary(reg8_bis)
View(dta8)
reg8 = felm(log_car ~ x| year + state, data = dta8)
summary(reg8)
#This is with interaction
reg8 = felm(log_car ~ x*crash | year + state, data = dta8)
summary(reg8)
